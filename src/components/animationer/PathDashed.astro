<svg
  width="1384"
  height="2231"
  viewBox="0 0 1384 2231"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
  class="Path hidden 1130:block 1480:hidden"
>
  <path
    d="M1244.83 1C1568.39 376.662 94 726.396 94 460.5C94 408 141.627 381.223 181 460.5C218 535 55.661 550.925 76.3265 796.5C106.326 1153 839.266 1037.01 1029.5 1083C1166 1116 1307.49 1081.52 1378 1369C1475.5 1766.5 133.368 1945 42.0009 1744.5C7.98889 1669.86 64.6884 1632.27 141.5 1744.5C206.5 1839.47 -155.36 2070.94 83.3262 2230.5"
    stroke="black"
    stroke-dasharray="20 20"></path>
</svg>

<style>
  svg.Path {
    position: absolute;
    top: 510px;
    right: 20px;
    width: 92%;
    height: auto;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const svg = document.querySelector("svg.Path");
    const path = svg.querySelector("path");
    const pathLength = path.getTotalLength();

    // Create mask elements
    const svgNS = "http://www.w3.org/2000/svg";
    const mask = document.createElementNS(svgNS, "mask");
    mask.id = "path-reveal-mask";

    // Create and set up the mask path
    const maskPath = path.cloneNode();
    maskPath.setAttribute("stroke", "white");
    maskPath.setAttribute("stroke-dasharray", pathLength);
    maskPath.setAttribute("stroke-dashoffset", pathLength);

    // Add elements to the SVG
    mask.appendChild(maskPath);
    svg
      .insertAdjacentElement("afterbegin", document.createElementNS(svgNS, "defs"))
      .appendChild(mask);

    // Apply the mask to the original path
    path.setAttribute("mask", "url(#path-reveal-mask)");

    // Get the section that contains the path
    const section = document.querySelector("#markederne");

    // Update mask on scroll
    function updateOnScroll() {
      const sectionRect = section.getBoundingClientRect();
      const sectionTop = sectionRect.top + window.scrollY;
      const sectionHeight = sectionRect.height;

      // Calculate when the section starts coming into view
      const triggerPoint = sectionTop - window.innerHeight * 0.1;
      const endPoint = sectionTop + sectionHeight;

      // Calculate scroll progress relative to the section
      const currentScroll = window.scrollY;

      let scrollProgress = 0;
      if (currentScroll > triggerPoint) {
        const activeScrollDistance = endPoint - triggerPoint;
        const scrolledDistance = currentScroll - triggerPoint;
        scrollProgress = Math.min(Math.max(scrolledDistance / activeScrollDistance, 0), 1);
      }

      maskPath.setAttribute("stroke-dashoffset", pathLength - scrollProgress * pathLength * 1.5);
    }

    // Initialize and add listener
    updateOnScroll();
    window.addEventListener("scroll", updateOnScroll);
  });
</script>
